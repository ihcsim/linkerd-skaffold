# -*- mode: Python -*-

settings = read_json("../tilt_options.json")

# output the Linkerd control plane YAML
def linkerd_yaml():
  linkerd = settings.get("linkerd_bin")

  # run `linkerd install` if the control plane namespace doesn't exist.
  # otherwise, run `linkerd upgrade`.
  ns_exists = str(local("%s check -o json | jq -r '.categories[] | select(.categoryName==\"linkerd-config\") | .checks[0].result'" % linkerd))
  if ns_exists.lower().strip() == "error":
    return local("%s install %s" % (linkerd, settings.get("linkerd_install_opts")))
  else:
    return local("%s upgrade" % linkerd)

# compute the images tag using the `head_root_tag` function of `bin/_tag.sh`
def image_tag():
  return str(local("bash -c 'source ./bin/_tag.sh && head_root_tag'")).strip()

controller = {
  "name": "linkerd-controller",
  "new_name": "controller",
  "deps": ["./controller", "./pkg"],
  "image": "gcr.io/linkerd-io/controller",
  "port_forwards": ["30085:8085","9995","31760:4191"],
  "labels": [
    {"linkerd.io/control-plane-component": "controller"},
  ]
}

destination = {
  "name": "linkerd-destination",
  "new_name": "destination",
  "port_forwards": ["8086","30996:9996","31761:4191"],
  "labels": [
    {"linkerd.io/control-plane-component": "destination"},
  ]
}

grafana = {
  "name": "linkerd-grafana",
  "new_name": "grafana",
  "image": "gcr.io/linkerd-io/grafana",
  "deps": ["./grafana"],
  "port_forwards": ["3000","31762:4192"],
  "labels": [
    {"linkerd.io/control-plane-component": "grafana"},
  ]
}

heartbeat = {
  "name": "linkerd-heartbeat",
  "new_name": "heartbeat",
  "labels": [
    {"linkerd.io/control-plane-component": "heartbeat"},
  ]
}

identity = {
  "name": "linkerd-identity",
  "new_name": "identity",
  "port_forwards": ["31080:8080","30990:9990","31763:4191"],
  "labels": [
    {"linkerd.io/control-plane-component": "identity"},
  ]
}

prometheus = {
  "name": "linkerd-prometheus",
  "new_name": "prometheus",
  "port_forwards": ["9090","31764:4191"],
  "labels": [
    {"linkerd.io/control-plane-component": "prometheus"},
  ]
}

proxy_injector = {
  "name": "linkerd-proxy-injector",
  "new_name": "proxy-injector",
  "port_forwards": ["31443:8443","30995:9995","31765:4191"],
  "labels": [
    {"linkerd.io/control-plane-component": "proxy-injector"},
  ]
}

sp_validator = {
  "name": "linkerd-sp-validator",
  "new_name": "sp-validator",
  "port_forwards": ["32443:8443","30997:9997","31766:4191"],
  "labels": [
    {"linkerd.io/control-plane-component": "sp-validator"},
  ]
}

tap = {
  "name": "linkerd-tap",
  "new_name": "tap",
  "port_forwards": ["8088","8089", "30998:9998","31767:4191"],
  "labels": [
    {"linkerd.io/control-plane-component": "sp-validator"},
  ]
}

web = {
  "name": "linkerd-web",
  "new_name": "web",
  "image": "gcr.io/linkerd-io/web",
  "deps": ["./web"],
  "port_forwards": ["8084", "30994:9994","31768:4191"],
  "labels": [
    {"linkerd.io/control-plane-component": "sp-validator"},
  ]
}

components = [controller, destination, grafana, heartbeat, identity, prometheus, proxy_injector, sp_validator, tap, web]

images = [controller, web, grafana]
